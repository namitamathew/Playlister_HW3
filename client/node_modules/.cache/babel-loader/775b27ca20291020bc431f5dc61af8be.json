{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSongTransaction from '../transactions/AddSongTransaction';\nimport MoveSongTransaction from '../transactions/MoveSongTransaction';\nimport RemoveSongTransaction from '../transactions/RemoveSongTransaction';\nimport EditSongTransaction from '../transactions/EditSongTransaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_SONG_EDIT_ACTIVE: \"SET_SONG_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    songEditActive: -1,\n    songDeleteActive: -1,\n    listMarkedForDeletion: null,\n    song: null,\n    oldSong: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: payload._id\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            songEditActive: -1,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.SET_SONG_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            songEditActive: payload,\n            songDeleteActive: -1,\n            listMarkedForDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      //let index = store.getPlaylistSize();\n      let body = {\n        \"name\": \"Untitled\",\n        \"songs\": []\n      };\n      let response = await api.createNewList(body);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        async function getListPairs(playlist) {\n          response = await api.getPlaylistPairs();\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n        getListPairs(playlist);\n        store.setCurrentList(playlist._id);\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.deleteList = function () {\n    async function deleteList() {\n      let listToDelete = store.listMarkedForDeletion;\n      console.log(listToDelete);\n      console.log(listToDelete.substring(12, listToDelete.toString().length));\n      let response = await api.deletePlaylistById(listToDelete.substring(12, listToDelete.toString().length));\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist, 'list deleted');\n      }\n    }\n    deleteList();\n    store.loadIdNamePairs();\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      console.log(id);\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          console.log('success');\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.refreshCurrentList = function (id) {\n    async function asyncChangeListSongs(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs = store.currentList.songs;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListSongs(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    this.showDeleteListModal();\n  };\n  store.markSongForEditing = function (id) {\n    console.log(store.currentList);\n    console.log(id);\n    storeReducer({\n      type: GlobalStoreActionType.SET_SONG_EDIT_ACTIVE,\n      payload: id\n    });\n    console.log(store.currentList);\n    this.showEditSongModal();\n    console.log(store.currentList);\n  };\n  store.showDeleteListModal = function (id) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  // THIS FUNCTION IS FOR HIDING THE MODAL\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    store.loadIdNamePairs();\n  };\n  store.addSong = function () {\n    async function asyncCreateNewSong() {\n      //let index = store.getPlaylistSize();\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let newSong = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"dQw4w9WgXcQ\"\n        };\n        playlist.songs.push(newSong);\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncCreateNewSong();\n  };\n  store.moveSong = function (start, end) {\n    if (start < end) {\n      let t = store.currentList.songs[start];\n      for (let i = start; i < end; i++) {\n        store.currentList.songs[i] = store.currentList.songs[i + 1];\n      }\n      store.currentList.songs[end] = t;\n    } else if (start > end) {\n      let t = store.currentList.songs[start];\n      for (let i = start; i > end; i--) {\n        store.currentList.songs[i] = store.currentList.songs[i - 1];\n      }\n      store.currentList.songs[end] = t;\n    }\n    store.refreshCurrentList(store.currentList._id);\n  };\n  store.showEditSongModal = function (id) {\n    console.log(id);\n    document.getElementById(\"edit-song-modal-title-textfield\").value = store.currentList.songs[id].title;\n    document.getElementById(\"edit-song-modal-artist-textfield\").value = store.currentList.songs[id].artist;\n    document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = store.currentList.songs[id].youTubeId;\n    store.oldSong = {\n      \"title\": document.getElementById(\"edit-song-modal-title-textfield\").value,\n      \"artist\": document.getElementById(\"edit-song-modal-artist-textfield\").value,\n      \"youTubeId\": document.getElementById(\"edit-song-modal-youTubeId-textfield\").value\n    };\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    store.songEditActive = id;\n  };\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showDeleteSongModal = function (id) {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n    store.songDeleteActive = id;\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.deleteSong = function (id) {\n    console.log(store.songEditActive);\n    store.currentList.songs.splice(store.songDeleteActive, 1);\n    console.log(store.currentList.songs);\n    store.refreshCurrentList(store.currentList._id);\n  };\n  store.addSongUndo = function (id) {\n    store.currentList.songs.splice(id, 1);\n    console.log(store.currentList.songs);\n    store.refreshCurrentList(store.currentList._id);\n  };\n  store.editSong = function (id) {\n    let songToEdit = store.songEditActive;\n    //console.log(songToEdit.toString().substring(0,6));\n\n    let songTitle = document.getElementById(\"edit-song-modal-title-textfield\").value;\n    let songArtist = document.getElementById(\"edit-song-modal-artist-textfield\").value;\n    let songYTiD = document.getElementById(\"edit-song-modal-youTubeId-textfield\").value;\n    store.currentList.songs[songToEdit].artist = songArtist;\n    store.currentList.songs[songToEdit].title = songTitle;\n    store.currentList.songs[songToEdit].youTubeId = songYTiD;\n    //store.addEditSongTransaction(store, store.songEditActive, store.oldSong.title, store.oldSong.artist, store.oldSong.youTubeId, songTitle, songArtist, songYTiD);\n    store.refreshCurrentList(store.currentList._id);\n  };\n  store.addAddSongTransaction = () => {\n    let size = store.currentList.songs.length;\n    let transaction = new AddSongTransaction(store, size);\n    tps.addTransaction(transaction);\n    //this.refreshToolbars();\n  };\n\n  store.addMoveSongTransaction = (start, end) => {\n    let transaction = new MoveSongTransaction(store, start, end);\n    tps.addTransaction(transaction);\n    //this.refreshToolbars();\n  };\n\n  store.undoDeleteSong = (num, title, artist, youTubeID) => {\n    let list = store.currentList;\n    let song = {\n      \"title\": title,\n      \"artist\": artist,\n      \"youTubeId\": youTubeID\n    };\n    list.songs.splice(num, 0, song);\n    store.refreshCurrentList(store.currentList._id);\n  };\n  store.addRemoveSongTransaction = (store, index, title, artist, youTubeID) => {\n    console.log(\"dr\" + index, title, artist, youTubeID);\n    let transaction = new RemoveSongTransaction(store, index, title, artist, youTubeID);\n    tps.addTransaction(transaction);\n    //this.refreshToolbars();\n  };\n\n  store.addEditSongTransaction = (index, oT, oA, oY, nT, nA, nY) => {\n    let transaction = new EditSongTransaction(store, index, oT, oA, oY, nT, nA, nY);\n    tps.addTransaction(transaction);\n    //this.refreshToolbars();\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"6LGCpvDhd0/yfxxWNNia2UqZD1k=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSongTransaction","MoveSongTransaction","RemoveSongTransaction","EditSongTransaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_SONG_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","songEditActive","songDeleteActive","listMarkedForDeletion","song","oldSong","storeReducer","action","type","payload","playlist","_id","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","createNewList","asyncCreateNewList","body","setCurrentList","deleteList","listToDelete","console","log","substring","toString","length","deletePlaylistById","loadIdNamePairs","closeCurrentList","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","refreshCurrentList","asyncChangeListSongs","songs","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","showDeleteListModal","markSongForEditing","showEditSongModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","addSong","asyncCreateNewSong","newSong","moveSong","start","end","t","i","value","title","artist","youTubeId","hideEditSongModal","showDeleteSongModal","hideDeleteSongModal","deleteSong","splice","addSongUndo","editSong","songToEdit","songTitle","songArtist","songYTiD","addAddSongTransaction","size","transaction","addTransaction","addMoveSongTransaction","undoDeleteSong","num","youTubeID","list","addRemoveSongTransaction","index","addEditSongTransaction","oT","oA","oY","nT","nA","nY"],"sources":["/Users/namitamathew/cse316/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSongTransaction from '../transactions/AddSongTransaction';\nimport MoveSongTransaction from '../transactions/MoveSongTransaction';\nimport RemoveSongTransaction from '../transactions/RemoveSongTransaction';\nimport EditSongTransaction from '../transactions/EditSongTransaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_SONG_EDIT_ACTIVE: \"SET_SONG_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}\n\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        songEditActive: -1,\n        songDeleteActive: -1,\n        listMarkedForDeletion: null,\n        song: null,\n        oldSong:null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songEditActive: -1, \n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: payload._id\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    songEditActive: -1,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_SONG_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    songEditActive: payload,\n                    songDeleteActive: -1,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            //let index = store.getPlaylistSize();\n            let body = {\"name\": \"Untitled\", \"songs\": []}\n            let response = await api.createNewList(body);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs(playlist) {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                getListPairs(playlist);\n                store.setCurrentList(playlist._id);\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    store.deleteList = function () {\n        async function deleteList() {\n            let listToDelete = store.listMarkedForDeletion;\n            console.log(listToDelete);\n            console.log(listToDelete.substring(12, listToDelete.toString().length));\n            let response = await api.deletePlaylistById(listToDelete.substring(12, listToDelete.toString().length));\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                console.log(playlist, 'list deleted')\n            }\n        }\n        deleteList()\n        store.loadIdNamePairs();\n    }\n\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            console.log(id);\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    console.log('success')\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.refreshCurrentList = function (id) {\n        async function asyncChangeListSongs(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.songs = store.currentList.songs;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListSongs(id);\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function (id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        })\n        this.showDeleteListModal();\n        \n    }\n\n    store.markSongForEditing = function (id) {\n        console.log(store.currentList);\n        console.log(id);\n        storeReducer({\n            type: GlobalStoreActionType.SET_SONG_EDIT_ACTIVE,\n            payload: id\n        })\n        console.log(store.currentList);\n\n        this.showEditSongModal();\n        console.log(store.currentList);\n        \n    }\n\n    store.showDeleteListModal = function (id) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n\n        store.loadIdNamePairs();\n    }\n\n    store.addSong = function () {\n        async function asyncCreateNewSong() {\n            //let index = store.getPlaylistSize();\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let newSong = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"dQw4w9WgXcQ\"};\n                playlist.songs.push(newSong);\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncCreateNewSong();\n    }\n\n    store.moveSong = function (start, end) {\n        if (start < end) {\n            let t = store.currentList.songs[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.songs[i] = store.currentList.songs[i + 1];\n            }\n            store.currentList.songs[end] = t;\n        }\n        else if (start > end) {\n            let t = store.currentList.songs[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.songs[i] = store.currentList.songs[i - 1];\n            }\n            store.currentList.songs[end] = t;\n        }\n\n\n    store.refreshCurrentList(store.currentList._id);\n        \n    }\n\n    store.showEditSongModal = function(id) {\n        console.log(id);\n        document.getElementById(\"edit-song-modal-title-textfield\").value = store.currentList.songs[id].title;\n        document.getElementById(\"edit-song-modal-artist-textfield\").value = store.currentList.songs[id].artist;\n        document.getElementById(\"edit-song-modal-youTubeId-textfield\").value = store.currentList.songs[id].youTubeId;\n        store.oldSong = {\"title\": document.getElementById(\"edit-song-modal-title-textfield\").value,\n    \"artist\": document.getElementById(\"edit-song-modal-artist-textfield\").value, \"youTubeId\": document.getElementById(\"edit-song-modal-youTubeId-textfield\").value}\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n        store.songEditActive = id\n\n\n    }\n    store.hideEditSongModal = function() {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal = function(id) {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n        store.songDeleteActive = id;\n\n    }\n    store.hideDeleteSongModal = function() {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.deleteSong = function(id) {\n        console.log(store.songEditActive);\n        store.currentList.songs.splice(store.songDeleteActive, 1);\n        console.log(store.currentList.songs);\n        store.refreshCurrentList(store.currentList._id);\n    }\n\n    store.addSongUndo = function(id) {\n        store.currentList.songs.splice(id, 1);\n        console.log(store.currentList.songs);\n        store.refreshCurrentList(store.currentList._id);\n    }\n\n\n\n    store.editSong = function(id) {\n        let songToEdit = store.songEditActive;\n        //console.log(songToEdit.toString().substring(0,6));\n\n        let songTitle = document.getElementById(\"edit-song-modal-title-textfield\").value;\n        let songArtist = document.getElementById(\"edit-song-modal-artist-textfield\").value;\n        let songYTiD = document.getElementById(\"edit-song-modal-youTubeId-textfield\").value;\n        store.currentList.songs[songToEdit].artist = songArtist;\n        store.currentList.songs[songToEdit].title = songTitle;\n        store.currentList.songs[songToEdit].youTubeId = songYTiD;\n        //store.addEditSongTransaction(store, store.songEditActive, store.oldSong.title, store.oldSong.artist, store.oldSong.youTubeId, songTitle, songArtist, songYTiD);\n        store.refreshCurrentList(store.currentList._id);\n    }\n\n\n    store.addAddSongTransaction = () => {\n        let size = store.currentList.songs.length;\n        let transaction = new AddSongTransaction(store, size);\n        tps.addTransaction(transaction);\n        //this.refreshToolbars();\n\n    }\n\n    store.addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSongTransaction(store, start, end);\n        tps.addTransaction(transaction);\n        //this.refreshToolbars();\n    }\n\n    store.undoDeleteSong = (num, title, artist, youTubeID) => {\n        let list = store.currentList;\n        let song = {\"title\": title, \"artist\": artist, \"youTubeId\": youTubeID};\n        list.songs.splice(num, 0, song);\n        store.refreshCurrentList(store.currentList._id);\n    }\n\n    store.addRemoveSongTransaction = (store, index, title, artist, youTubeID) => {\n        console.log(\"dr\"+index, title, artist, youTubeID);\n        let transaction = new RemoveSongTransaction(store, index, title, artist, youTubeID);\n        tps.addTransaction(transaction);\n        //this.refreshToolbars();\n    }\n\n    store.addEditSongTransaction = (index, oT, oA, oY, nT, nA, nY) => {\n        let transaction = new EditSongTransaction(store, index, oT, oA, oY, nT, nA, nY);\n        tps.addTransaction(transaction);\n        //this.refreshToolbars();\n    }\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}