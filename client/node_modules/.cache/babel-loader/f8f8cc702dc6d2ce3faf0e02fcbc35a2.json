{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      //let index = store.getPlaylistSize();\n      let body = {\n        \"name\": \"Untitled\",\n        \"songs\": []\n      };\n      let response = await api.createNewList(body);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        async function getListPairs(playlist) {\n          response = await api.getPlaylistPairs();\n          console.log(response.data.success);\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(pairsArray);\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n        getListPairs(playlist);\n        store.setCurrentList(playlist._id);\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.deleteList = function () {\n    async function deleteList() {\n      let listToDelete = store.listMarkedForDeletion;\n      let response = await api.deletePlaylistById(listToDelete._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist, 'list deleted');\n      }\n    }\n    deleteList();\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      console.log(id);\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          console.log('success');\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.refreshCurrentList = function (id) {\n    async function asyncChangeListSongs(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs = store.currentList.songs;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListSongs(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: null\n    });\n    this.showDeleteListModal();\n  };\n  store.showDeleteListModal = function (id) {\n    async function getListById() {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let list = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: list\n        });\n      } else {\n        console.log(\"deletion-failed\");\n      }\n    }\n    getListById();\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  // THIS FUNCTION IS FOR HIDING THE MODAL\n  store.hideDeleteListModal = function () {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: null\n    });\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    store.loadIdNamePairs();\n  };\n  store.addSong = function () {\n    async function asyncCreateNewSong() {\n      //let index = store.getPlaylistSize();\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let newSong = {\n          \"title\": \"Untitled\",\n          \"artist\": \"Unknown\",\n          \"youTubeId\": \"dQw4w9WgXcQ\"\n        };\n        playlist.songs.push(newSong);\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncCreateNewSong();\n  };\n  store.moveSong = function (start, end) {\n    console.log('rabdom');\n    console.log(start);\n    console.log(end);\n    if (start < end) {\n      let t = store.currentList.songs[start];\n      for (let i = start; i < end; i++) {\n        store.currentList.songs[i] = store.currentList.songs[i + 1];\n      }\n      store.currentList.songs[end] = t;\n    } else if (start > end) {\n      let t = store.currentList.songs[start];\n      for (let i = start; i > end; i--) {\n        store.currentList.songs[i] = store.currentList.songs[i - 1];\n      }\n      store.currentList.songs[end] = t;\n    }\n    console.log(store.currentList.songs);\n    store.refreshCurrentList(store.currentList._id);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"dUUQkwr6iES2jtM/LXizXBXizqo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","storeReducer","action","type","payload","playlist","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","createNewList","asyncCreateNewList","body","console","log","setCurrentList","deleteList","listToDelete","deletePlaylistById","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","refreshCurrentList","asyncChangeListSongs","songs","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","markListForDeletion","showDeleteListModal","getListById","list","modal","document","getElementById","classList","add","hideDeleteListModal","remove","addSong","asyncCreateNewSong","newSong","moveSong","start","end","t","i"],"sources":["/Users/namitamathew/cse316/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}\n\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            //let index = store.getPlaylistSize();\n            let body = {\"name\": \"Untitled\", \"songs\": []}\n            let response = await api.createNewList(body);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs(playlist) {\n                    response = await api.getPlaylistPairs();\n                    console.log(response.data.success);\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        console.log(pairsArray);\n                        storeReducer({\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                getListPairs(playlist);\n                store.setCurrentList(playlist._id);\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    store.deleteList = function () {\n        async function deleteList() {\n            let listToDelete = store.listMarkedForDeletion;\n            let response = await api.deletePlaylistById(listToDelete._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                console.log(playlist, 'list deleted')\n            }\n        }\n        deleteList()\n    }\n\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            console.log(id);\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    console.log('success')\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.refreshCurrentList = function (id) {\n        async function asyncChangeListSongs(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.songs = store.currentList.songs;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListSongs(id);\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.markListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: null\n        })\n        this.showDeleteListModal();\n        \n    }\n\n    store.showDeleteListModal = function (id) {\n        async function getListById() {\n            let response = await api.getPlaylistById(id);\n            if(response.data.success) {\n                let list = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: list\n                });\n            }\n            else\n            {\n                console.log(\"deletion-failed\");\n            }\n        }\n        getListById();\n\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    store.hideDeleteListModal = function () {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: null\n        });\n\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n\n        store.loadIdNamePairs();\n    }\n\n    store.addSong = function () {\n        async function asyncCreateNewSong() {\n            //let index = store.getPlaylistSize();\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let newSong = {\"title\": \"Untitled\", \"artist\": \"Unknown\", \"youTubeId\": \"dQw4w9WgXcQ\"};\n                playlist.songs.push(newSong);\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncCreateNewSong();\n    }\n\n    store.moveSong = function (start, end) {\n        console.log('rabdom')\n        console.log(start);\n        console.log(end);\n        if (start < end) {\n            let t = store.currentList.songs[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.songs[i] = store.currentList.songs[i + 1];\n            }\n            store.currentList.songs[end] = t;\n        }\n        else if (start > end) {\n            let t = store.currentList.songs[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.songs[i] = store.currentList.songs[i - 1];\n            }\n            store.currentList.songs[end] = t;\n        }\n\n        console.log(store.currentList.songs)\n\n        store.refreshCurrentList(store.currentList._id);\n        \n    }\n\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}